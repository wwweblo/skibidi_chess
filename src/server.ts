import express, { Application, Request, Response } from "express";
import { PrismaClient } from "@prisma/client";
import cors from "cors";
import dotenv from "dotenv";
import { Server } from "socket.io";
import http from "http";

dotenv.config();

const prisma = new PrismaClient();
const app: Application = express();
const server = http.createServer(app);
const PORT = process.env.PORT || 3001;

// Middleware –¥–ª—è CORS –∏ JSON
app.use(cors({ origin: "http://localhost:3000", credentials: true }));
app.use(express.json());

// Middleware –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ç–µ–ª–æ–º –∑–∞–ø—Ä–æ—Å–∞
app.use((req, res, next) => {
  console.log(`üì© –ó–∞–ø—Ä–æ—Å: ${req.method} ${req.url}`);
  if (Object.keys(req.query).length) {
    console.log("üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:", req.query);
  }
  if (req.body && Object.keys(req.body).length) {
    console.log("üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", req.body);
  }
  next();
});

// GET /messages/:chatId - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞, —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
app.get("/messages/:chatId", async (req: Request, res: Response): Promise<void> => {
  const chatId = Number(req.params.chatId);

  if (isNaN(chatId)) {
    res.status(400).json({ error: "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π chatId" });
    return;
  }

  try {
    let chat = await prisma.chat.findUnique({ where: { id: chatId } });

    // –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
    if (!chat) {
      chat = await prisma.chat.create({
        data: { name: `–ß–∞—Ç ${chatId}`, isGroup: false },
      });
      console.log(`‚úÖ –ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω: ${chat.id}`);
    }

    const messages = await prisma.message.findMany({
      where: { chatId: chat.id },
      orderBy: { createdAt: "asc" },
    });

    res.json(messages);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (GET /messages):", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// GET /api/chat/access - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É
app.get("/api/chat/access", async (req: Request, res: Response): Promise<void> => {
  const { chatId, userLogin } = req.query;

  if (!chatId || !userLogin) {
    console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ /api/chat/access");
    res.status(400).json({ hasAccess: false, message: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" });
    return;
  }

  const chatIdNum = Number(chatId);
  const userLoginStr = String(userLogin);

  try {
    const chat = await prisma.chat.findUnique({
      where: { id: chatIdNum },
      include: { participants: true },
    });

    if (!chat) {
      console.error(`‚ùå –ß–∞—Ç —Å id ${chatIdNum} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      res.status(404).json({ hasAccess: false, message: "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      return;
    }

    const hasAccess = chat.participants.some((participant) =>
      participant.userLogin.trim().toLowerCase() === userLoginStr.trim().toLowerCase()
    );

    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞: chatId=${chatIdNum}, userLogin=${userLoginStr}, hasAccess=${hasAccess}`);
    res.json({ hasAccess });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É:", error);
    res.status(500).json({ hasAccess: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// GET / - —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get("/", (req: Request, res: Response): void => {
  res.json({ message: "üöÄ –°–µ—Ä–≤–µ—Ä WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç!", websocket: "/socket.io/" });
});

// POST /messages - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
app.post("/messages", async (req: Request, res: Response): Promise<void> => {
  console.log("üì© –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /messages");
  console.log("üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", req.body);

  const { chatId, text, userLogin } = req.body;

  if (!chatId || !text || !userLogin) {
    console.error("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ POST /messages");
    res.status(400).json({ error: "‚ùå –í—Å–µ –ø–æ–ª—è (chatId, text, userLogin) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    return;
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const userExists = await prisma.user.findUnique({ where: { login: userLogin } });
    if (!userExists) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLogin} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      res.status(400).json({ error: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —á–∞—Ç; –µ—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
    let chat = await prisma.chat.findUnique({ where: { id: chatId } });
    if (!chat) {
      chat = await prisma.chat.create({
        data: { name: `–ß–∞—Ç ${chatId}`, isGroup: false },
      });
      console.log(`‚úÖ –ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω: ${chat.id}`);
    }

    // –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ chat.id
    const message = await prisma.message.create({
      data: {
        chatId: chat.id,
        text,
        userLogin,
        createdAt: new Date(),
      },
    });

    console.log(`üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ ${chat.id}: ${text}`);
    res.status(201).json(message);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è (POST /messages):", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", details: error });
  }
});

// WebSocket —Å–µ—Ä–≤–µ—Ä
const io = new Server(server, {
  cors: { origin: "http://localhost:3000", credentials: true },
});

io.on("connection", (socket) => {
  console.log(`‚úÖ WebSocket: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);

  socket.on("message", (message) => {
    console.log("üì© WebSocket: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message);
    io.emit("message", message);
  });

  socket.on("disconnect", () => {
    console.log(`‚ùå WebSocket: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, async () => {
  try {
    await prisma.$connect();
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä WebSocket –∏ API –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);

    console.log("üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:");
    app._router.stack
      .filter((r: any) => r.route)
      .forEach((r: any) => {
        console.log(`‚û°Ô∏è  ${Object.keys(r.route.methods).join(", ").toUpperCase()} ${r.route.path}`);
      });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", error);
    process.exit(1);
  }
});
