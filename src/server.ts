import express, { Application, Request, Response } from "express";
import { PrismaClient } from "@prisma/client";
import cors from "cors";
import dotenv from "dotenv";
import { Server } from "socket.io";
import http from "http";

dotenv.config();

const prisma = new PrismaClient();
const app: Application = express(); // ‚úÖ –û–±—ä—è–≤–ª—è–µ–º `app` –∫–∞–∫ `Application`
const server = http.createServer(app); // ‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ HTTP
const PORT = process.env.PORT || 3001;

app.use(cors({ origin: "http://localhost:3000", credentials: true }));
app.use(express.json());

// ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
app.use((req, res, next) => {
  console.log(`üì© –ó–∞–ø—Ä–æ—Å: ${req.method} ${req.url}`);
  next();
});

// ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç `/messages/:chatId`
app.get("/messages/:chatId", async (req: Request, res: Response): Promise<void> => {
  const chatId = Number(req.params.chatId);

  if (isNaN(chatId)) {
    res.status(400).json({ error: "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π chatId" });
    return;
  }

  try {
    let chat = await prisma.chat.findUnique({ where: { id: chatId } });

    // ‚úÖ –ï—Å–ª–∏ —á–∞—Ç–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
    if (!chat) {
      chat = await prisma.chat.create({
        data: { name: `–ß–∞—Ç ${chatId}`, isGroup: false },
      });
      console.log(`‚úÖ –ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω: ${chat.id}`);
    }

    const messages = await prisma.message.findMany({
      where: { chatId: chat.id },
      orderBy: { createdAt: "asc" },
    });

    res.json(messages);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π API
app.get("/", (req: Request, res: Response): void => {
  res.json({ message: "üöÄ –°–µ—Ä–≤–µ—Ä WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç!", websocket: "/socket.io/" });
});

// ‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä
const io = new Server(server, {
  cors: { origin: "http://localhost:3000", credentials: true },
});

io.on("connection", (socket) => {
  console.log(`‚úÖ WebSocket: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);

  socket.on("message", (message) => {
    console.log("üì© WebSocket: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message);
    io.emit("message", message);
  });

  socket.on("disconnect", () => {
    console.log(`‚ùå WebSocket: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
  });
});

// ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
server.listen(PORT, async () => {
  try {
    await prisma.$connect();
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä WebSocket –∏ API –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);

    console.log("üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:");
    app._router.stack
      .filter((r: any) => r.route)
      .forEach((r: any) => console.log(`‚û°Ô∏è  ${Object.keys(r.route.methods).join(", ").toUpperCase()} ${r.route.path}`));
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", error);
    process.exit(1);
  }
});

app.post("/messages", async (req: Request, res: Response): Promise<void> => {
  console.log("üì© –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /messages");
  console.log("üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", req.body);

  const { chatId, text, userLogin } = req.body;

  if (!chatId || !text || !userLogin) {
    console.error("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
    res.status(400).json({ error: "‚ùå –í—Å–µ –ø–æ–ª—è (chatId, text, userLogin) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    return;
  }

  try {
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const userExists = await prisma.user.findUnique({ where: { login: userLogin } });

    if (!userExists) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLogin} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      res.status(400).json({ error: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      return;
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —á–∞—Ç
    let chat = await prisma.chat.findUnique({ where: { id: chatId } });

    if (!chat) {
      chat = await prisma.chat.create({
        data: { name: `–ß–∞—Ç ${chatId}`, isGroup: false },
      });
      console.log(`‚úÖ –ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω: ${chat.id}`);
    }

    // ‚úÖ –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
    const message = await prisma.message.create({
      data: {
        chatId,
        text,
        userLogin,
        createdAt: new Date(),
      },
    });

    console.log(`üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ ${chatId}: ${text}`);

    res.status(201).json(message);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", details: error });
  }
});
