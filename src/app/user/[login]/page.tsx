"use client";

import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { fetchUserProfile, getOrCreateChat, fetchUser } from "@/lib/userApi";
import { Message } from "@/types/message";
import styles from "./UserProfile.module.css";
import { Alert } from "@/components/Alert/Alert";

interface UserProfile {
  userLogin: string;
  userEmail: string;
  messages: Message[];
}

const UserPage = () => {
  const params = useParams();
  const login = params?.login as string;
  const router = useRouter();
  const [user, setUser] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState(true);
  const [chatLoading, setChatLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!login) return;

    const loadUser = async () => {
      try {
        const userData = await fetchUserProfile(login);
        if (!userData) throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        setUser(userData);
      } catch (err: any) {
        setError(err.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è");
      } finally {
        setLoading(false);
      }
    };

    loadUser();
  }, [login]);

  const handleOpenChat = async () => {
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ user –Ω–µ —Ä–∞–≤–µ–Ω null
    if (!user) return;
    setChatLoading(true);
    setError(null);

    try {
      const currentUser = await fetchUser();
      if (!currentUser || !currentUser.userLogin) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      }

      console.log(
        `üì° –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ –º–µ–∂–¥—É ${currentUser.userLogin} –∏ ${user.userLogin}`
      );

      const chatId = await getOrCreateChat(currentUser.userLogin, user.userLogin);
      if (!chatId) throw new Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞");

      console.log(`‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —á–∞—Ç ${chatId}`);
      router.push(`/chat/${chatId}`);
    } catch (err: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞:", err);
      setError(err.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç");
    } finally {
      setChatLoading(false);
    }
  };

  if (loading) return <Alert text="‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è..." />;
  if (error) return <Alert text={`‚ùå ${error}`} />;
  if (!user) return <Alert text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" />;

  return (
    <div className={styles.profileContainer}>
      <h1 className={styles.profileTitle}>üë§ –ü—Ä–æ—Ñ–∏–ª—å {user.userLogin}</h1>
      <p>
        <strong>Email:</strong> {user.userEmail}
      </p>
      <button
        className={styles.chatButton}
        onClick={handleOpenChat}
        disabled={chatLoading}
      >
        {chatLoading ? "üîÑ –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞..." : "üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç"}
      </button>
      <h2 className={styles.messagesTitle}>üí¨ –°–æ–æ–±—â–µ–Ω–∏—è:</h2>
      {user.messages.length ? (
        <ul className={styles.messagesList}>
          {user.messages.map((msg) => (
            <li key={msg.id} className={styles.messageItem}>
              {msg.text}
            </li>
          ))}
        </ul>
      ) : (
        <p className={styles.noMessages}>
          üò∂ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        </p>
      )}
    </div>
  );
};

export default UserPage;
