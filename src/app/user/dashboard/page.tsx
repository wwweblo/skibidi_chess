"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import Button from "@/components/Button/Button";
import { Alert } from "@/components/Alert/Alert";
import style from "./dashboard.module.css"

export default function Dashboard() {
  const router = useRouter();
  const [user, setUser] = useState<{ login: string; email: string } | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const res = await fetch("/api/auth/me", { credentials: "include" });
  
        if (!res.ok) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${res.status} ${res.statusText}`);
          throw new Error("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        }
  
        const data = await res.json();
        if (!data.user || !data.user.userLogin || !data.user.userEmail) {
          console.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API:", data);
          throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }
  
        setUser({ login: data.user.userLogin, email: data.user.userEmail });
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        router.push("/user/login");
      } finally {
        setLoading(false);
      }
    };
  
    fetchUser();
  }, [router]);
  

  const handleLogout = async () => {
    try {
      const response = await fetch("/api/auth/logout", {
        method: "POST",
        credentials: "include",
      });

      if (response.ok) {
        router.push("/user/login");
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", await response.text());
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error);
    }
  };

  return (
    <div className={`max-w-md mx-auto mt-10 p-6 border rounded-lg shadow-lg ${style.Container}`}>
      <h2 className={style.Header}>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</h2>

      {loading ? (
        <Alert>üõú –ó–∞–≥—Ä—É–∑–∫–∞...</Alert>
      ) : user ? (
        <table>
          <tbody>
            <tr>
              <th className={style.TableHeader}>–õ–æ–≥–∏–Ω:</th>
              <td className={style.TableData}>{user.login}</td>
            </tr>
            <tr>
              <th className={style.TableHeader}>Email:</th>
              <td className={style.TableData}>{user.email}</td>
            </tr>
          </tbody>
        </table>
      ) : (
        <Alert>ü•µ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</Alert>
      )}

      <Button variant="decline" onClick={handleLogout}>–í—ã–π—Ç–∏</Button>
    </div>
  );
}
