import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function POST(req: NextRequest) {
  try {
    const { userLogin, targetLogin } = await req.json();

    console.log("üì© –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞:", { userLogin, targetLogin });

    if (!userLogin || !targetLogin) {
      console.error("‚ùå –û—à–∏–±–∫–∞: userLogin –∏ targetLogin –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã");
      return NextResponse.json({ error: "‚ùå userLogin –∏ targetLogin –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" }, { status: 400 });
    }

    if (userLogin === targetLogin) {
      console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç —Å —Å–∞–º–∏–º —Å–æ–±–æ–π");
      return NextResponse.json({ error: "‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç —Å —Å–∞–º–∏–º —Å–æ–±–æ–π" }, { status: 400 });
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const userExists = await prisma.user.findUnique({ where: { login: userLogin } });
    const targetUserExists = await prisma.user.findUnique({ where: { login: targetLogin } });

    if (!userExists || !targetUserExists) {
      console.error("‚ùå –û—à–∏–±–∫–∞: –û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω", { userExists, targetUserExists });
      return NextResponse.json({ error: "‚ùå –û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 400 });
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —á–∞—Ç –º–µ–∂–¥—É –≠–¢–ò–ú–ò –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    let chat = await prisma.chat.findFirst({
      where: {
        isGroup: false,
        AND: [
          { participants: { some: { userLogin } } },
          { participants: { some: { userLogin: targetLogin } } },
        ],
      },
    });

    if (chat) {
      console.log(`üîÑ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç: ${chat.id}`);
    } else {
      console.log("‚úÖ –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π");
      chat = await prisma.chat.create({
        data: {
          isGroup: false,
          participants: {
            create: [
              { user: { connect: { login: userLogin } } },
              { user: { connect: { login: targetLogin } } },
            ],
          },
        },
        include: { participants: true },
      });

      console.log(`‚úÖ –ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω: ${chat.id}`);
    }

    if (!chat) {
      console.error("‚ùå –û—à–∏–±–∫–∞: –ß–∞—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω!");
      return NextResponse.json({ error: "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞" }, { status: 500 });
    }

    console.log(`‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º chatId: ${chat.id}`);
    return NextResponse.json({ chatId: chat.id });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ API /api/chat/getOrCreateChat:", error);
    return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", details: String(error) }, { status: 500 });
  }
}
