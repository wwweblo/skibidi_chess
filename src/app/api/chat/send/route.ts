import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import jwt, { JwtPayload } from "jsonwebtoken";
import { cookies } from "next/headers";

const prisma = new PrismaClient();

export async function POST(req: Request) {
  try {
    console.log("üì© API /chat/send: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å");

    // üîπ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookie
    const cookieStore = await cookies();
    const token = cookieStore.get("token")?.value;
    
    if (!token) {
      console.warn("‚ö†Ô∏è API /chat/send: –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫—É–∫–∞—Ö");
      return NextResponse.json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" }, { status: 401 });
    }

    // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    const SECRET_KEY = process.env.JWT_SECRET;
    if (!SECRET_KEY) {
      console.error("‚ùå –û—à–∏–±–∫–∞: JWT_SECRET –Ω–µ –∑–∞–¥–∞–Ω –≤ .env!");
      return NextResponse.json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
    }

    // üîπ –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT
    const decoded = jwt.verify(token, SECRET_KEY) as JwtPayload;
    if (!decoded.userLogin) {
      return NextResponse.json({ message: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" }, { status: 401 });
    }

    console.log("‚úÖ API /chat/send: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫", decoded.userLogin);

    // üîπ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const body = await req.json();
    console.log("üì® –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:", body);

    const { text, chatId } = body;

    // üîπ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!text || !text.trim()) {
      return NextResponse.json({ message: "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" }, { status: 400 });
    }

    if (!chatId || typeof chatId !== "number") {
      return NextResponse.json({ message: "–û—à–∏–±–∫–∞: chatId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º" }, { status: 400 });
    }

    console.log("üì® API /chat/send: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...", { text, chatId });

    // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    await prisma.$connect();

    // üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
    const newMessage = await prisma.message.create({
      data: {
        text,
        userLogin: decoded.userLogin,
        chatId,
        createdAt: new Date(), // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º Date –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
      },
    });

    console.log("‚úÖ API /chat/send: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:", newMessage);

    return NextResponse.json(newMessage, { status: 201 });
  } catch (error) {
    console.error("‚ùå API /chat/send: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error);
    return NextResponse.json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error: String(error) }, { status: 500 });
  }
}
