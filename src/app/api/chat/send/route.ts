import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import jwt, { JwtPayload } from "jsonwebtoken";
import { cookies } from "next/headers";

const prisma = new PrismaClient();

export async function POST(req: Request) {
  try {
    // üîπ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookie
    const cookieStore = await cookies();
    const token = cookieStore.get("token")?.value;

    if (!token) {
      return NextResponse.json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" }, { status: 401 });
    }

    // üîπ –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT
    const SECRET_KEY = process.env.JWT_SECRET || "your_secret_key";
    const decoded = jwt.verify(token, SECRET_KEY) as JwtPayload;

    if (!decoded.userLogin) {
      return NextResponse.json({ message: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" }, { status: 401 });
    }

    // üîπ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const { text } = await req.json();
    if (!text || !text.trim()) {
      return NextResponse.json({ message: "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" }, { status: 400 });
    }

    // üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const newMessage = await prisma.message.create({
      data: {
        text,
        userLogin: decoded.userLogin,
        createdAt: new Date(),
      },
    });

    console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:", newMessage);

    return NextResponse.json(newMessage, { status: 201 });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    return NextResponse.json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
  }
}
