import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import { serialize } from "cookie";

const prisma = new PrismaClient();
const SECRET_KEY = process.env.JWT_SECRET;

if (!SECRET_KEY) {
  throw new Error("‚ùå JWT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª!");
}

export async function POST(req: Request) {
  try {
    const { loginOrEmail, password } = await req.json();

    // üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É –∏–ª–∏ email
    const user = await prisma.user.findFirst({
      where: { OR: [{ login: loginOrEmail }, { email: loginOrEmail }] },
    });

    if (!user || !(await bcrypt.compare(password, user.password))) {
      return NextResponse.json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å" }, { status: 401 });
    }

    // üîê –°–æ–∑–¥–∞—ë–º JWT
    const token = jwt.sign(
      { userLogin: user.login, userEmail: user.email },
      SECRET_KEY as string,
      { expiresIn: "7d" }
    );

    // üç™ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ `httpOnly` cookie
    const cookie = serialize("token", token, {
      httpOnly: true, // ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ JavaScript (–∑–∞—â–∏—Ç–∞ –æ—Ç XSS)
      secure: process.env.NODE_ENV === "production", // üîê –¢–æ–ª—å–∫–æ HTTPS –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
      sameSite: "strict", // üî• –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ! –ë—ã–ª–æ "Strict", —Ç–µ–ø–µ—Ä—å "strict"
      path: "/", // üç™ –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Å–µ—Ö —Ä–æ—É—Ç–æ–≤
      maxAge: 7 * 24 * 60 * 60, // ‚è≥ 7 –¥–Ω–µ–π
    });

    return NextResponse.json({ message: "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω" }, { headers: { "Set-Cookie": cookie } });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
    return NextResponse.json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
  }
}
