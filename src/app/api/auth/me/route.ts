import { NextResponse } from "next/server";
import jwt, { JwtPayload } from "jsonwebtoken";
import { cookies } from "next/headers";

export async function GET(req: Request) {
  try {
    const cookieStore = await cookies(); // ‚úÖ `cookies()` –Ω–µ —Ç—Ä–µ–±—É–µ—Ç `await`
    const token = cookieStore.get("token")?.value;

    if (!token) {
      console.warn("‚ö†Ô∏è API /me: –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫—É–∫–∞—Ö");
      return NextResponse.json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" }, { status: 401 });
    }

    const SECRET_KEY = process.env.JWT_SECRET || "your_secret_key";
    const decoded = jwt.verify(token, SECRET_KEY) as JwtPayload;

    if (!decoded.userLogin) {
      return NextResponse.json({ message: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" }, { status: 401 });
    }

    console.log("‚úÖ API /me: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:", decoded.userLogin);

    return NextResponse.json({ user: decoded, token }); // ‚úÖ –¢–µ–ø–µ—Ä—å API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ API /me:", error);
    return NextResponse.json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
  }
}

export async function fetchUser(): Promise<{ userLogin: string; token: string } | null> {
  try {
    const res = await fetch("/api/auth/me", { credentials: "include" });

    console.log("üì° API /me –æ—Ç–≤–µ—Ç:", res.status, await res.clone().json()); // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç

    if (!res.ok) throw new Error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${res.status}`);

    const data = await res.json();
    if (!data.user || !data.user.userLogin) throw new Error("‚ùå API –Ω–µ –≤–µ—Ä–Ω—É–ª userLogin");
    if (!data.token) throw new Error("‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ API");

    console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:", data.user.userLogin);
    return { userLogin: data.user.userLogin, token: data.token };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    return null;
  }
}
