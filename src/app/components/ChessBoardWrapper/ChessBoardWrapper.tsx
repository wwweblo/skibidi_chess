import React, { useEffect, useRef, useState, useMemo } from "react";
import { Chess, Move } from "chess.js";
import { Chessboard, ChessboardDnDProvider } from "react-chessboard";
import style from './ChessBoardWrapper.module.css';
import Button from "../Button/Button";

interface ChessBoardWrapperProps {
  isFenVisible?: boolean;
  isTakebackAble?: boolean; // –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ö–æ–¥–æ–≤
  size?: number;
  onFenChange?: (fen: string) => void;
}

const ChessBoardWrapper: React.FC<ChessBoardWrapperProps> = ({
  isFenVisible = false,
  isTakebackAble = false,
  size = 500,
  onFenChange
}) => {
  const game = useMemo(() => new Chess(), []);
  const [fenPosition, setFenPosition] = useState(game.fen());
  const [history, setHistory] = useState<Move[]>([]); // –ò—Å—Ç–æ—Ä–∏—è —Ö–æ–¥–æ–≤
  const [redoStack, setRedoStack] = useState<Move[]>([]); // –î–ª—è –ø–æ–≤—Ç–æ—Ä–∞ —Ö–æ–¥–æ–≤
  const [copyStatus, setCopyStatus] = useState<string | null>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const [boardOrientation, setBoardOrientation] = useState<"white" | "black">("white");

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è FEN –≤—Ä—É—á–Ω—É—é
  const handleFenInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const fen = e.target.value;
    try {
      game.load(fen);
      setFenPosition(game.fen());
      onFenChange?.(game.fen());
      setHistory([]); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ
      setRedoStack([]);
    } catch (error) {
      console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π FEN:", error);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ö–æ–¥–∞
  const handlePieceDrop = (sourceSquare: string, targetSquare: string, piece: string): boolean => {
    const move = game.move({
      from: sourceSquare,
      to: targetSquare,
      promotion: piece[1]?.toLowerCase() ?? "q",
    });

    if (move) {
      setFenPosition(game.fen());
      setHistory([...history, move]); // –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ–¥ –≤ –∏—Å—Ç–æ—Ä–∏—é
      setRedoStack([]); // –û—á–∏—â–∞–µ–º redo-—Å—Ç–µ–∫ –ø—Ä–∏ –Ω–æ–≤–æ–º —Ö–æ–¥–µ
      onFenChange?.(game.fen());
      return true;
    }
    return false;
  };

  // –û—Ç–º–µ–Ω–∞ —Ö–æ–¥–∞ (Undo)
  const handleUndo = () => {
    if (history.length > 0) {
      const lastMove = history[history.length - 1];
      game.undo();
      setFenPosition(game.fen());
      setHistory(history.slice(0, -1)); // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥
      setRedoStack([lastMove, ...redoStack]); // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–π —Ö–æ–¥ –≤ redo-—Å—Ç–µ–∫
      onFenChange?.(game.fen());
    }
  };

  // –ü–æ–≤—Ç–æ—Ä —Ö–æ–¥–∞ (Redo)
  const handleRedo = () => {
    if (redoStack.length > 0) {
      const nextMove = redoStack[0];
      game.move(nextMove);
      setFenPosition(game.fen());
      setHistory([...history, nextMove]); // –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
      setRedoStack(redoStack.slice(1)); // –£–¥–∞–ª—è–µ–º –∏–∑ redo-—Å—Ç–µ–∫–∞
      onFenChange?.(game.fen());
    }
  };

  const handleRestart = () => {
    if (confirm("Restart the game?")) {
      game.reset(); // Reset the game state
      setFenPosition(game.fen()); // Update the FEN position
      setHistory([]); // Clear the move history
      setRedoStack([]); // Clear the redo stack
      onFenChange?.(game.fen()); // Notify any listeners of the FEN change
    }
  };
  

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ FEN
  const copyFenToClipboard = () => {
    navigator.clipboard.writeText(fenPosition)
      .then(() => {
        setCopyStatus("‚úîÔ∏è");
        setTimeout(() => setCopyStatus(null), 2000);
      })
      .catch(err => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ FEN:", err));
  };

  return (
    <div className={style.wrapperContainer} style={{ width: size }}>

      <ChessboardDnDProvider>
        <Chessboard
          id="CustomChessboard"
          position={fenPosition}
          onPieceDrop={handlePieceDrop}
          boardWidth={size}
          boardOrientation={boardOrientation}
        />

        <div className="flex mt-5 gap-2">
          
          {isFenVisible && (
            <>
              <Button size='small' style='gray' onClick={copyFenToClipboard}>
                {copyStatus || "FEN"}
              </Button>
              <input
                ref={inputRef}
                value={fenPosition}
                onChange={handleFenInputChange}
                placeholder="–í–≤–µ–¥–∏—Ç–µ FEN"
                className={style.fenInputField}
                style={{ width: '100%' }}
              />
            </>
          )}
        </div>

        
        {isTakebackAble && (
          <div className="flex mt-2 gap-2">
            <Button size="small" style="gray" onClick={handleUndo} disabled={history.length === 0}>
              Undo ‚Ü©Ô∏è
            </Button>
            <Button size="small" style="gray" onClick={handleRedo} disabled={redoStack.length === 0}>
              Redo ‚Ü™Ô∏è
            </Button>
            
            <Button size="small" style="gray" onClick={handleRestart} disabled={history.length === 0}>
              RestartüóëÔ∏è
            </Button>
          </div>
        )}

        <Button size="small" style="gray" onClick={() => {
          setBoardOrientation(boardOrientation === "white" ? "black" : "white")}}>
          Flip üîÑÔ∏è
        </Button>
      </ChessboardDnDProvider>
    </div>
  );
};

export default ChessBoardWrapper;
