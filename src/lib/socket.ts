import { io, Socket } from "socket.io-client";
import { fetchUser } from "./authApi";

let socket: Socket | null = null;

export const connectSocket = async (): Promise<Socket | null> => {
  try {
    if (socket && socket.connected) {
      console.warn("‚ö†Ô∏è WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!", socket.id);
      return socket;
    }

    const user = await fetchUser();
    if (!user?.token) {
      console.error("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
      return null;
    }

    console.log("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket —Å —Ç–æ–∫–µ–Ω–æ–º:", user.token);

    socket = io("ws://localhost:3001", {
      auth: { token: user.token },
      withCredentials: true,
      transports: ["websocket"], // ‚úÖ –¢–æ–ª—å–∫–æ WebSocket
      reconnection: true,
      reconnectionAttempts: 10,
      reconnectionDelay: 3000,
    });

    socket.on("connect", () => {
      console.log("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: ID", socket?.id);
    });

    socket.on("connect_error", (err) => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:", err.message);
    });

    socket.on("disconnect", (reason) => {
      console.warn("‚ö†Ô∏è WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:", reason);
      socket = null;
    });

    return socket;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ WebSocket:", error);
    return null;
  }
};

// ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–∏—è WebSocket
export const disconnectSocket = () => {
  if (socket) {
    console.log("üîå –û—Ç–∫–ª—é—á–∞–µ–º WebSocket...");
    socket.disconnect();
    socket = null;
  }
};

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
export const sendMessageViaSocket = (message: { text: string; chatId: number }) => {
  if (socket && socket.connected) {
    socket.emit("message", message);
    console.log("üì© WebSocket: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", message);
  } else {
    console.warn("‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
  }
};
