export type RegisterFormData = {
  login: string;
  email: string;
  password: string;
};

export type LoginFormData = {
  loginOrEmail: string;
  password: string;
};

export type UserData = {
  userLogin: string;
  userEmail: string;
};

// üîπ –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function registerUser(data: RegisterFormData): Promise<{ success: boolean; message: string | null }> {
  try {
    if (!data.login || !data.email || !data.password) {
      throw new Error("–õ–æ–≥–∏–Ω, email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã");
    }

    const response = await fetch("/api/auth/register", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(data),
      credentials: "include",
    });

    if (!response.ok) {
      const result = await response.json();
      throw new Error(result.message || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
    }

    return { success: true, message: null };
  } catch (error: any) {
    return { success: false, message: error.message ?? "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" };
  }
}

// üîπ –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function loginUser(data: LoginFormData): Promise<{ success: boolean; message: string | null }> {
  try {
    if (!data.loginOrEmail || !data.password) {
      throw new Error("–õ–æ–≥–∏–Ω/Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã");
    }

    const response = await fetch("/api/auth/login", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(data),
      credentials: "include",
    });

    if (!response.ok) {
      const result = await response.json();
      throw new Error(result.message || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞");
    }

    return { success: true, message: null };
  } catch (error: any) {
    return { success: false, message: error.message ?? "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞" };
  }
}

// üîπ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —á–∞—Ç–µ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
export async function fetchUser() {
  try {
    const res = await fetch("/api/auth/me", { credentials: "include" });

    if (!res.ok) throw new Error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${res.status} ${res.statusText}`);

    const data = await res.json();
    console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω:", data);

    if (!data?.user?.userLogin) throw new Error("‚ùå API –Ω–µ –≤–µ—Ä–Ω—É–ª userLogin");

    return {
      userLogin: data.user.userLogin,
      token: data.token || data.user.token, // ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    return null;
  }
}




// üîπ –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function logoutUser(): Promise<void> {
  try {
    await fetch("/api/auth/logout", { method: "POST", credentials: "include" });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error);
  }
}
